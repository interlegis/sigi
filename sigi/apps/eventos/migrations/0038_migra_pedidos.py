# Generated by Django 4.2.4 on 2023-08-11 20:36
import re
from functools import reduce
from django.db import migrations
from django.utils import timezone
from sigi.apps.utils import to_ascii


def forwards(apps, schema_editor):
    import ipdb

    ipdb.set_trace()
    TipoEvento = apps.get_model("eventos", "TipoEvento")
    Evento = apps.get_model("eventos", "Evento")
    Solicitacao = apps.get_model("eventos", "Solicitacao")
    ItemSolicitado = apps.get_model("eventos", "ItemSolicitado")

    siglas = {
        "Encontro": 2,
        "SAPL": 4,
        "PROCLEG": 8,
        "SAPL-A&C": 10,
        "PE": 11,
        "CERIMN": 12,
        "CI": 13,
        "MJ": 14,
        "PM": 15,
        "LC": 18,
        "SAPL-R": 19,
        "SAPL-ICP": 20,
        "EDEM": 22,
        "eDEM": 22,
        "GPS": 23,
        "CIGE": 24,
        "LGPD": 25,
        "TEGLEG": 26,
        "CICLO": 27,
        "OUV": 32,
        "GPM": 40,
        "SAPL-SPVP": 41,
        "SAAP": 42,
        "GABP": 52,
        "PROCMULHER": 57,
        "RELPUB": 58,
        "ORÇPM": 59,
        "ARQ": 60,
        "BOM-ATEND": 61,
        "MIDSOC": 62,
        "POL-LEG": 63,
    }

    m_siglas = {s.lower().replace("-", " "): k for s, k in siglas.items()}

    conjuncoes = [
        "oficina",
        "a",
        "e",
        "o",
        "da",
        "de",
        "do",
        "na",
        "no",
        "em",
        "ao",
        "-",
        "com",
    ]

    # Adiciona as siglas pré-definidas pela COPERI

    for sgl, id in siglas.items():
        TipoEvento.objects.filter(id=id).update(sigla=sgl)

    # Siglas para TipoEvento com as iniciais de cada palavra do nome

    for t in TipoEvento.objects.filter(sigla=""):
        t.sigla = "".join(
            [s[:1] for s in t.nome.split(" ") if s.lower() not in conjuncoes]
        )
        t.save()

    tipos = {
        t.id: {
            s
            for s in to_ascii(t.nome.lower()).replace("/", " ").split(" ")
            if s not in conjuncoes
        }
        for t in TipoEvento.objects.exclude(id=35)
    }

    conjugados = [
        to_ascii(re.search("(\w+) e (\w+)", t.nome.lower()).group())
        for t in TipoEvento.objects.exclude(id=35).filter(
            nome__icontains=" e "
        )
    ]

    # Tipo_evento_id 35 foi cadastrado como 'pedidos SIGAD' e todos os eventos
    # deste tipo serão convertidos em Solicitacao

    for e in Evento.objects.filter(tipo_evento_id=35).exclude(
        casa_anfitria=None
    ):
        solicitacao = Solicitacao(
            casa=e.casa_anfitria,
            senador=e.solicitante,
            num_processo=e.num_processo,
            descricao=e.descricao,
            data_pedido=e.data_pedido or timezone.localdate(),
            contato=e.contato,
            telefone_contato=e.telefone,
            estimativa_casas=0,
            estimativa_servidores=0,
        )
        solicitacao.save()

        if e.num_processo:
            for se in Evento.objects.filter(
                num_processo=e.num_processo
            ).exclude(id=e.id):
                ItemSolicitado(
                    solicitacao=solicitacao,
                    tipo_evento=se.tipo_evento,
                    virtual=se.virtual,
                    inicio_desejado=se.data_inicio
                    or se.data_pedido
                    or timezone.localdate(),
                    status="A",  # autorizado
                    justificativa="Automática na migração dos dados",
                    evento=se,
                ).save()

        descricoes = (
            reduce(
                lambda x, y: x.replace(y, y.replace(" e ", " ")),
                conjugados,
                to_ascii(
                    e.descricao.lower().replace("\r\n", "").replace(";", ",")
                ),
            )
            .replace(" e ", ", ")
            .replace("/", " ")
            .replace(".", " ")
            .replace("(", " ")
            .replace(")", " ")
            .split(",")
        )

        for d in descricoes:
            d = d.strip()
            tipo_id = None
            # Verifica se não é uma sigla pré-definida #
            if d in m_siglas:
                tipo_id = m_siglas[d]
            else:
                termos = {
                    s.strip() for s in d.split(" ") if s not in conjuncoes
                }
                similar = min(
                    [
                        (id, len(termos.difference(t)))
                        for id, t in tipos.items()
                    ],
                    key=lambda x: x[1],
                )
                if similar and similar[1] < len(termos):
                    tipo_id = similar[0]

            if tipo_id:
                if not ItemSolicitado.objects.filter(
                    solicitacao=solicitacao, tipo_evento_id=tipo_id
                ).exists():
                    ItemSolicitado(
                        solicitacao=solicitacao,
                        tipo_evento_id=tipo_id,
                        virtual=e.virtual,
                        inicio_desejado=e.data_inicio
                        or e.data_pedido
                        or timezone.localdate(),
                        status="S",
                    ).save()
        e.delete()


class Migration(migrations.Migration):
    dependencies = [
        (
            "eventos",
            "0037_tipoevento_duracao_tipoevento_sigla_solicitacao_and_more",
        ),
    ]

    operations = [
        migrations.RunPython(
            forwards,
        )
    ]
