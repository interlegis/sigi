# Generated by Django 5.2.1 on 2025-08-28 01:37
import re
from django.db import migrations


def forward(apps, schema_editor):
    # Monta regexps #
    cargos = r"|".join(
        [
            "AUXILIAR LEGISLATIVA",
            "Acessor Parlamentar",
            "Administrador",
            "Agente Administrativo de Eventos",
            "Agente Legislativo",
            "Analista de Revisão Pessoal",
            "Analista de TI",
            "Analista jurídico",
            "Assessora Especial da Secretaria Legislativa e Presidente da Comissão de Regulamentação de Cargos",
            "ASSESSOR JURÍDICO DA PRESIDÊNCIA",
            "Assessor Jurídico",
            "Assessor Legislativo",
            "Assessor Parlamentar",
            "Assessor de Comunicação",
            "Assessora Jurídica",
            "Assessora",
            "Assessor",
            "Auxiliar Administrativa",
            "Chefe de Gabinete da Presidência",
            "Chefe de Gabinete",
            "Controlador Geral da Câmara",
            "Controlador Interno",
            "Controlador",
            "Coord do Departamento Legislativo",
            "Coordenador de Tecnologia da Informação",
            "Coordenador do Departamento Legislativo da Câmara",
            "Coordenadora",
            "Coordenadora da Escola do Parlamento",
            "DIRETOR GERAL",
            "Deputado",
            "Diretor Administrativo",
            "Diretor",
            "Diretor Geral",
            "Diretor Hospital",
            "Diretor Legislativo",
            "Diretor Tesoureiro",
            "Diretor de Compras e Licitações",
            "Diretor de Matérias e Protocolo",
            "Diretor de TI",
            "Diretor de Tecnologia e Informação",
            "Diretor do Departamento Legislativo",
            "Diretor do Legislativo",
            "Diretora Administrativa",
            "Diretora",
            "Diretora Legislativa",
            "Diretora da Escola do Legislativo",
            "Diretora geral da Câmara",
            "Motorista",
            "O Subprocurador Geral",
            "Ouvidor",
            "Ouvidor Geral",
            "PRESIDENTE",
            "Prefeito",
            "Presidente",
            "Presidente Vereador",
            "Presidente Vereadora",
            "Presidente da Escola do Legislativo",
            "Presidente do InGEPE",
            "Primeira Secretária",
            "Procurador Geral",
            "Procurador",
            "Procuradora",
            "Secretária",
            "Secretária Saúde",
            "Secretária da Casa Civil",
            "Secretária-Geral",
            "Secretário Administrativo",
            "Secretário",
            "Secretário de Administração",
            "Secretário de Planejamento",
            "Secretário de Saúde",
            "Secretário-geral da Câmara",
            "Servidor",
            "Servidora",
            "Tesoureiro",
            "Técnica Administrativa",
            "Técnico Legislativo da Secretaria Legislativa e Presidente da Comissão Sistêmica de Sustentabilidade Legislativa",
            "Técnico Legislativo",
            "VEREADOR",
            "Verador",
            "Vereadora",
            "Vice Prefeita",
            "Vice Prefeito",
            "Vice Presidente",
            "Vice-Prefeito",
            "a Vereadora",
            "o Assessor Jurídico",
            "o Presidente",
            "o Servidor",
            "o Vereador",
        ]
    )
    patterns = [
        re.compile(p, re.IGNORECASE)
        for p in [
            r"(?P<nome>.+?)[,?][ ?]inscrit[o|a] no CPF[ ?](?P<cpf>.+?)[,?][ ?](?P<local_trabalho>.+)",
            r"(?P<nome>.+?)[ ]*-[ ]*(?P<local_trabalho>.+)",
            r"(?P<local_trabalho>.+?)( *):( *)(?P<nome>.+)",
            r"(?P<nome>.+?)( *);( *)[cpf?][ *](?P<cpf>.+)",
            r"(?P<nome>.+?)( *),( *)(?P<local_trabalho>.+)",
            r"(?P<nome>.+?) CPF (?P<cpf>.+)",
            r"(?P<nome>.+?)(?P<cpf>[\d.]*[-]*\d+)",
            r"(?P<nome>.+?)[ ]*\((?P<local_trabalho>.+)\)",
            rf"(?P<local_trabalho>{cargos})[ ]*(?P<nome>.+)",
            rf"(?P<nome>.+?)[ ]*(?P<local_trabalho>{cargos})",
        ]
    ]

    Evento = apps.get_model("eventos", "Evento")
    eventos = (
        Evento.objects.filter(tipo_evento__categoria="V")
        .exclude(convite=None)
        .exclude(convite__nomes_participantes="")
    ).prefetch_related("convite_set")

    for evento in eventos:
        evento.participante_set.all().delete()
        for convite in evento.convite_set.all():
            participantes = convite.nomes_participantes.strip().splitlines()
            for nome in participantes:
                if nome.strip() == "":
                    continue
                for pattern in patterns:
                    match = pattern.match(nome)
                    if match is not None:
                        break
                if match is None:
                    dados = {"nome": nome}
                else:
                    dados = {
                        k: v.strip() for k, v in match.groupdict().items()
                    }
                if len(dados["nome"]) > 100:
                    dados["nome"] = dados["nome"][:100]
                if "cpf" in dados and len(dados["cpf"]) > 30:
                    dados["cpf"] = dados["cpf"][:30]
                evento.participante_set.create(
                    casa_legislativa_id=convite.casa_id, **dados
                )


def backward(apps, schema_editor):
    Evento = apps.get_model("eventos", "Evento")
    Participante = apps.get_model("eventos", "Participante")
    eventos = (
        Evento.objects.filter(tipo_evento__categoria="V")
        .exclude(convite=None)
        .exclude(convite__nomes_participantes="")
    )
    Participante.objects.filter(evento__in=eventos).delete()


class Migration(migrations.Migration):

    dependencies = [
        ("eventos", "0064_alter_modelodeclaracao_texto_participante"),
    ]

    operations = [migrations.RunPython(forward, backward)]
